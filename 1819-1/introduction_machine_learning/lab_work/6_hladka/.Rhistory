library(ISLR); dim(Caravan);
ca = Caravan
str(ca)
names(ca)
ca$Purchase
table(ca$Purchase)
prop.table(table(ca$Purchase))
ca$Purchase = ifelse(ca$Purchase == "Yes", 1, 0)
ca$Purchase
str(ca)
dim(ca)
str(ca[,-86])
scale(ca[,-86])
scale(ca-86])
scale(ca-86)
scale(ca[-86])
scale(ca[1,-86])
scale(ca[,-86])
scale(ca[-86])
ca[-86] = scale(ca[-86])
sample(1:10, 10)
sample(1:length(ca), length(ca))
size(ca)
dim(ca)
sample(1:dim(ca), dim(ca))
sample(1:5822, 5822)
count(ca)
sa = sample(1:5822, 5822)
caTr = ca[sa[1:2411]]
caTr = ca[sa[1:2411],]
str(caTr)
caTe = ca[sa[-1:2411],]
caTe = ca[sa[-(1:2411)],]
caTr
caTe
summary(caTr)
summary(caTe)
summary(caTr)
summary(caTe)
summary(caTr)
summary(caTe)
str(caTr)
dim(caTr)
dim(caTe)
caTe = ca[sa[-(1:2911)],]
caTr = ca[sa[(1:2911)],]
var(caTe$MOSTYPE)
var(caTr$MOSTYPE)
mean(caTr$MOSTYPE)
mean(caTe$MOSTYPE)
caTr
caTe
caTr
str(caTr)
str(caTe)
caTe = ca[sa[-(1:2912)],]
caTe[1,]
caTr[1,]
mean(caTr$MGODGE)
mean(caTe$MGODGE)
nrow(caTr)
nrow(caTe)
sum(caTr == caTe)
sum(caTr == caTe)
sa[1:2911]
length(sa)
caTe = ca[sa[-(1:2911)],]
caTr = ca[sa[(1:2911)],]
caTe = ca[sa[2912:5822],]
nrow(caTE)
nrow(caTe)
nrow(caTr)
str(caTe)
mean(caTe$AFIETS)
mean(caTr$AFIETS)
sum(caTe$Purchase == 0)
caTe$PurchasePr = rep(0,1:length(sa))
caTe$PurchasePr = rep(0, length(sa))
caTe$PurchasePr = rep(0, 2911)
caTe
table(caTe$Purchase,caTe$PurchasePre)
table(caTe$Purchase,caTe$PurchasePr)
str(caTe)
factor(caTe$Purchase)
factor(caTe$Purchase, levels=c(0,1))
TR = factor(caTe$Purchase, levels=c(0,1))
PR = factor(caTe$PurchasePr, levels=c(0,1))
table(TR, PR)
table(PR, TR)
glm
glm(Purchase ~ ., data = caTr, family = binomial)
logistic = glm(Purchase ~ ., data = caTr, family = binomial)
predict(logistic, prTe, type='response')
predict(logistic, caTe, type='response')
predict(logistic, caTe, type='response')>0.5
lR = ifelse(predict(logistic, caTe, type='response')>0.5, 1,0)
table(lR, TR)
LR = ifelse(predict(logistic, caTe, type='response')>0.5, 1,0)
table(LR, TR)
LR = ifelse(predict(logistic, caTe, type='response')>0.2, 1, 0)
table(LR, TR)
LR = ifelse(predict(logistic, caTe, type='response')>0.5, 1, 0)
table(LR, TR)
LR = ifelse(predict(logistic, caTe, type='response')>0.25, 1, 0)
table(LR, TR)
2*0.011*0.005/(0.011+0.005)
install.packages("class")
?knn
knn(caTr[-86], caTe[-86], caTr[86],k=5)
library(class)
knn(caTr[-86], caTe[-86], caTr[86],k=5)
str(caTr[-86](\
str(caTr[-86])
str(caTr[86])
dim(caTr[86])
dim(caTr[-86])
dim(caTe[-86])
knn(caTr[-86], caTe[-86], caTr[86], k=5)
dim(caTr[-86])
dim(caTe[-86])
dim(caTr[86])
knn(caTr[-86,], caTe[-86,], caTr[86,], k=5)
knn(caTr[-86], caTe[-86], vector(caTr[86]), k=5)
knn(caTr[-86], caTe[-86], c(caTr[86]), k=5)
knn(as.data.frame(caTr[-86]), as.data.frame(caTe[-86]), as.data.frame(caTr[86]), k=5)
knn(caTr[-86], caTe[-86], caTr[86], k=5)
str(caTr[86])
head(str(caTe))
knn(caTr, caTe[-86], caTr[86], k=5)
knn(caTr[-86], caTe[-c(86,87)], caTr[86], k=5)
dim(caTe[-c(86,87)])
dim(caTr[-c(86)])
caTe[87]=NULL
knn(caTr, caTe[-86], caTr[86], k=5)
knn(caTr[-86], caTe[-86], caTr[86], k=5)
knn(caTr[-86], caTe[-86], caTr[86], k=5)
dim(caTr[-86])
dim(caTe[-86])
dim(caTr[86])
str(caTr[86])
str(caTe[86])
knn(caTr[-86], caTe[-86], caTr[86], k=5)
dim(caTr[-86])
dim(caTe[-86])
dim(caTr[86])
knn(caTr[-86], caTe[-86], caTr[86], k=5)
knn(caTr[-86], caTe[-86], caTr[86, drop = TRUE], k=5)
knn(caTr[-86], caTe[-86], caTr[86], k=5)
knn(caTr[-86], caTe[-86], caTr[86], k=5)
knn(caTr[-86], caTe[-86], caTr[86], k=5)
knn(caTr[,-86], caTe[,-86], caTr[,86], k=5)
res = knn(caTr[,-86], caTe[,-86], caTr[,86], k=5)
table(res, caTe[,86])
2720/2911
res = knn(caTr[,-86], caTe[,-86], caTr[,86], k=1)
table(res, caTe[,86])
(2577+18)/2911
te = sample(1:2911, 2911)
caTr.1 = caTr[te[(2910/10*0):(2910/10*1)]]
caTr.1 = caTr[te[(2910/10*0):(2910/10*1)],]
caTr.2 = caTr[te[(2910/10*1):(2910/10*2)],]
caTr.3 = caTr[te[(2910/10*2):(2910/10*3)],]
caTr.4 = caTr[te[(2910/10*3):(2910/10*4)],]
caTr.5 = caTr[te[(2910/10*4):(2910/10*5)],]
caTr.6 = caTr[te[(2910/10*5):(2910/10*6)],]
caTr.7 = caTr[te[(2910/10*6):(2910/10*7)],]
caTr.8 = caTr[te[(2910/10*7):(2910/10*8)],]
caTr.9 = caTr[te[(2910/10*8):(2910/10*9)],]
caTr.10 = caTr[te[(2910/10*9):(2910/10*10)],]
length(caTr.1)
length(caTr.5)
install.packages("e1071")
naiveBayes(Purchase ~ ., data = caTr)
library(e1071)
naiveBayes(Purchase ~ ., data = caTr)
res = naiveBayes(Purchase ~ ., data = caTr)
str(res)
res
predict(res, caTe)
predict(res, data=caTe)
predict(res, newdata=caTe)
predict(res, newdata=caTe[,-86])
predict(res, newdata=caTe[,-86], type='class')
str(caTr)
res = naiveBayes(Purchase ~ ., data = caTr)
predict(res, newdata=caTr, type='class')
predict(res, newdata=caTe, type='class')
predict(res, newdata=caTe, type='class')
?predict
predict(Purchase ~. ,res, newdata=caTe, type='class')
predict(res, Purchase ~ ., newdata=caTe, type='class')
predict(res, newdata=caTe, type='class')
